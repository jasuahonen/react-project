
# This is the teams CD/CD pipeline
name: CI/CD
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# The jobs that is part of the workflow
env:
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository }}
  FRONTEND_IMAGE_NAME: se-5g00dm04/final-autumn-frontend
  BACKEND_IMAGE_NAME: se-5g00dm04/final-autumn-backend
jobs:
  # Job for testing the frontend and backend code changes
  test:
    # running on ubuntu
    runs-on: ubuntu-latest
    steps:
      # Fetch the code using the checkout action
      - name: Fetch Code
        uses: actions/checkout@v3
      # Installing a Node LTS version
      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      # Installing the node modules for the frontend
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm install
      # Running the tests for the frontend code
      - name: Run Frontend Tests
        working-directory: ./frontend
        # this command needs to be added to the frontend package.json
        run: npm run test:ci
      # Installing the node modules for the backend
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm install
      # Running the linter and tests for the backend code
      - name: Run Backend Tests
        working-directory: ./backend
        run: npm run lint && npm run test
  # Job for building the frontend and backend container images and pushing it to the registry
  build:
    runs-on: ubuntu-latest
    # Test job needs to succeed
    needs: test
    # Give the job permission to write packages to the registry
    permissions:
      contents: read
      packages: write
    steps:
      # Fetch the code using the checkout action
      - name: Fetch Code
        uses: actions/checkout@v3
      # Installing the node modules for the frontend
      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      # Setting up the Docker build environment
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Loggin into the GitHub container registry
      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          # The GitHub registry
          registry: ${{ env.REGISTRY }}
          # The person that triggered the build
          username: ${{ github.actor }}
          # A special GitHub secret token we can use
          password: ${{ secrets.GITHUB_TOKEN }}

      # Frontend metadata
      - name: Docker Metadata action for Frontend
        uses: docker/metadata-action@v5.0.0
        id: frontend-meta
        with:
          images: "${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}"
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
      
      # Building and pushing the frontend image to the registry using an action
      - name: Build and push Docker Frontend images
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./frontend
          file: ./frontend/DockerfileProduction
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}

      # Backend metadata
      - name: Docker Metadata action for Backend
        uses: docker/metadata-action@v5.0.0
        id: backend-meta
        with:
          images: "${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}"
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch

      # Building and pushing the backend image to the registry using an action
      - name: Build and push Docker Backend images
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./backend
          file: ./backend/DockerfileServer
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          
  # Job for deploying frontend and backend container images on the server
  deploy:
    runs-on: ubuntu-latest
    # Build job needs to succeed
    needs: build
    steps:
      # Fetch the code using the checkout action
      - name: Fetch Code
        uses: actions/checkout@v3
      # Install OpenVPN to be able to connect to the VM server
      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt --assume-yes --no-install-recommends install openvpn openvpn-systemd-resolved
      # Create OpenVPN configuration files
      - name: Setup VPN config
        run: |
          echo "${{ secrets.VPN_CA_CRT }}" > ca.crt
          echo "${{ secrets.VPN_USER_CRT }}" > user.crt
          echo "${{ secrets.VPN_USER_KEY }}" > user.key
          echo "${{ secrets.VPN_PASSWORD }}" > secret.txt
          echo "${{ secrets.VPN_CONFIG }}" > config.ovpn
      # Start the VPN connection
      - name: Connect VPN
        run: sudo openvpn --config config.ovpn --daemon --log vpn.log
      # Helper command to make sure the VPN connection is up before continueing
      - name: Wait for a VPN connection
        timeout-minutes: 1
        run: until ping -c1 ${{ secrets.REMOTE_SERVER }}; do sleep 10; done
      # Steps needed for getting SSH to connect
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.DEPLOY_PRIVATE_KEY }}" | base64 -d > ~/.ssh/id_rsa 
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.REMOTE_SERVER }} >> ~/.ssh/known_hosts
      # Install rsync
      - name: Install rsync
        run: sudo apt --assume-yes --no-install-recommends install rsync
            # Create stack config and sync to the VM server
      - name: Create and sync stack configuration
        run: |
          mkdir -p prod_stack
          cp docker-compose.prod.yml prod_stack/docker-compose.yml
          echo "BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:main" >> prod_stack/.env
          echo "FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:main" >> prod_stack/.env
          rsync -r prod_stack "${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }}:./"
      
    # SSH into VM server and bring up the stack
      - name: Start containers via SSH
        run:
          ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }} 
          "
          docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }};
          cd prod_stack;
          docker-compose pull;
          docker-compose up -d;
          "
          
      - name: Kill VPN connection
        if: always()
        run: |
          sudo chmod 777 vpn.log
          sudo killall openvpn
      - name: Upload VPN logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: VPN logs
          path: vpn.log
