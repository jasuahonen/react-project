

    # This workflow will deploy a release to the
    name: Deploy Release
    
    # Controls when the workflow will run
    on:
      # Triggers the workflow on push or pull request events but only for the "release" branch
      push:
        branches: ["release"]
        tags:
          - "v*"
    
      # Allows you to run this workflow manually from the Actions tab
      workflow_dispatch:
    
    env:
      REGISTRY: ghcr.io
      REPOSITORY: ${{ github.repository }}
      FRONTEND_IMAGE_NAME: se-5g00dm04/final-project-frontend
      BACKEND_IMAGE_NAME: se-5g00dm04/final-project-backend
    
    # A workflow run is made up of one or more jobs that can run sequentially or in parallel
    jobs:
      # We will just build the images from the code, all the code should have been tested
      build:
        # The type of runner that the job will run on
        runs-on: ubuntu-latest
    
        permissions:
          contents: read
          packages: write
    
        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
          # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
          - name: Fetch code
            uses: actions/checkout@v3
    
          - name: Set up QEMU
            uses: docker/setup-qemu-action@v3
    
          - name: Setup Docker Build
            uses: docker/setup-buildx-action@v3
    
          - name: Docker login
            uses: docker/login-action@v3
            with:
              registry: ${{ env.REGISTRY }}
              username: ${{ github.actor }}
              password: ${{ secrets.GITHUB_TOKEN }}
    
          # Frontend metadata
          - name: Docker Metadata action for Frontend
            uses: docker/metadata-action@v5.0.0
            id: frontend-meta
            with:
              images: "${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}"
              tags: |
                type=ref,event=branch
                type=semver,pattern={{version}}
                type=semver,pattern={{major}}.{{minor}}
    
          # Building and pushing the frontend image to the registry using an action
          - name: Build and push Docker Frontend images
            uses: docker/build-push-action@v5.0.0
            with:
              context: ./frontend
              file: ./frontend/DockerfileProduction
              push: true
              tags: ${{ steps.frontend-meta.outputs.tags }}
              labels: ${{ steps.frontend-meta.outputs.labels }}
    
          # Backend metadata
          - name: Docker Metadata action for Backend
            uses: docker/metadata-action@v5.0.0
            id: backend-meta
            with:
              images: "${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}"
              tags: |
                type=ref,event=branch
                type=semver,pattern={{version}}
                type=semver,pattern={{major}}.{{minor}}
    
          # Building and pushing the backend image to the registry using an action
          - name: Build and push Docker Backend images
            uses: docker/build-push-action@v5.0.0
            with:
              context: ./backend
              file: ./backend/DockerfileServer
              push: true
              tags: ${{ steps.backend-meta.outputs.tags }}
              labels: ${{ steps.backend-meta.outputs.labels }}

      deploy:
        runs-on: ubuntu-latest
        # Build job needs to succeed
        needs: build
    
        permissions:
          contents: read
          packages: read
    
        steps:
          # Fetch the code using the checkout action
          - name: Fetch Code
            uses: actions/checkout@v3
            
          # Install OpenVPN to be able to connect to the VM server
          - name: Install OpenVPN
            run: |
              sudo apt update
              sudo apt --assume-yes --no-install-recommends install openvpn openvpn-systemd-resolved
          # Create OpenVPN configuration files
          - name: Setup VPN config
            run: |
              echo "${{ secrets.VPN_CA_CRT }}" > ca.crt
              echo "${{ secrets.VPN_USER_CRT }}" > user.crt
              echo "${{ secrets.VPN_USER_KEY }}" > user.key
              echo "${{ secrets.VPN_PASSWORD }}" > secret.txt
              echo "${{ secrets.VPN_CONFIG }}" > config.ovpn
          # Start the VPN connection
          - name: Connect VPN
            run: sudo openvpn --config config.ovpn --daemon --log vpn.log
          # Helper command to make sure the VPN connection is up before continueing
          - name: Wait for a VPN connection
            timeout-minutes: 2
            run: until ping -c1 ${{ secrets.REMOTE_SERVER }}; do sleep 2; done
          # Steps needed for getting SSH to connect
          - name: Setup SSH
            run: |
              mkdir -p ~/.ssh/
              echo "${{ secrets.DEPLOY_PRIVATE_KEY }}" | base64 -d > ~/.ssh/id_rsa 
              chmod 600 ~/.ssh/id_rsa
              ssh-keyscan -H ${{ secrets.REMOTE_SERVER }} >> ~/.ssh/known_hosts
          # Install rsync
          - name: Install rsync
            run: sudo apt --assume-yes --no-install-recommends install rsync
          # Create stack config and sync to the VM server
          - name: Create and sync stack configuration
            run: |
              mkdir -p prod_stack
              cp docker-compose.prod.yml prod_stack/docker-compose.yml
              echo "BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:main" >> prod_stack/.env
              echo "FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:main" >> prod_stack/.env
              rsync -r prod_stack "${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }}:./"
          # SSH into VM server and bring up the stack
          - name: Start containers via SSH
            run:
              ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }} /bin/bash
              "
              docker logout;
              docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }};
              cd prod_stack;
              docker-compose pull;
              docker-compose up -d;
              "
          - name: Kill VPN connection
            if: always()
            run: |
              sudo chmod 777 vpn.log
              sudo killall openvpn
